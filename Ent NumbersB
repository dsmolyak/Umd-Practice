import java.util.Scanner;
import java.util.Arrays;
import java.util.Vector;
import java.util.Collections;

public class Goodstein {

	private static long solveGoodstein(long N, long B) {
		long temp = 0;
		String s = N + "";
		long[] l = new long[s.length()];
		for (int i = 0; i < s.length(); i++) {
			l[i] = Character.getNumericValue(s.charAt(i));
		}
		long val = cb(l, B);
		while (cb(l,10) != 0) {
			 val = cb(l, B);
			System.out.println("val " + val);
			System.out.println("base " + B + "n " + s);
			B++;
			if (l[l.length -1] != 0) {
				l[l.length -1]--;
			}
			else  {
				int k = l.length - 1;
				for (int i = l.length -1; i >= 0; i--) {
					if (l[i] != 0) {
						k = i;
						break;
					}
				}
				for (int i = l.length - 1; i > k; i--) {
					l[i] = B - 1;
				}
				l[k]--;
			}
			s = "";
			for (int i = 0; i < l.length; i++) {
				s += l[i] + "";
			}
			if (s.length() > 20) {
				return -1;
			}
			N = Long.parseLong(s);
			if (cb(l,10) > Math.pow(2, 60)) {
				return -1;
			}
			else if (N == 0) {
				return ++B;
			}
			
		}
		/* ***************
		 * 
		 * Your code should return the base at which N goes to zero (if <=
		 * 2^60), or -1 otherwise.
		 */

		/* -------------------- END OF INSERTION -------------------- */
		return -1;
	}

	public static long cb(long[] a, long base) {
		long sum = 0;
		for (int i = 0; i < a.length; i++) {
			sum += a[i] * Math.pow(base, a.length - i - 1);
		}
		return sum;
	}

	public static void main(String[] args) {
		long[] arr = { 3, 11 };
		//System.out.println(cb(arr, 12));
		
		 Scanner sc = new Scanner(System.in);
		 
		 int numCases = sc.nextInt();
		 
		 for(int i = 0; i < numCases; i++) { long N = sc.nextLong(); long B =
		 sc.nextLong();
		 
		 long ret = solveGoodstein(N, B);
		 
		 if(ret == -1) { System.out.println("Starting with N = " + N +
		 " and B = " + B + ", sequence did not converge to 0 before 2^60."); }
		 else { System.out.println("Starting with N = " + N + " and B = " + B
		 + ", sequence converges to 0 at Base " + ret + "."); } }
		 
	}
}
